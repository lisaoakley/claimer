// This file was generated by counterfeiter
package lockerfakes

import (
	"sync"
)

type FakeGitRepo struct {
	CloneOrPullStub        func() error
	cloneOrPullMutex       sync.RWMutex
	cloneOrPullArgsForCall []struct{}
	cloneOrPullReturns     struct {
		result1 error
	}
	cloneOrPullReturnsOnCall map[int]struct {
		result1 error
	}
	CommitAndPushStub        func(message string) error
	commitAndPushMutex       sync.RWMutex
	commitAndPushArgsForCall []struct {
		message string
	}
	commitAndPushReturns struct {
		result1 error
	}
	commitAndPushReturnsOnCall map[int]struct {
		result1 error
	}
	DirStub        func() string
	dirMutex       sync.RWMutex
	dirArgsForCall []struct{}
	dirReturns     struct {
		result1 string
	}
	dirReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitRepo) CloneOrPull() error {
	fake.cloneOrPullMutex.Lock()
	ret, specificReturn := fake.cloneOrPullReturnsOnCall[len(fake.cloneOrPullArgsForCall)]
	fake.cloneOrPullArgsForCall = append(fake.cloneOrPullArgsForCall, struct{}{})
	fake.recordInvocation("CloneOrPull", []interface{}{})
	fake.cloneOrPullMutex.Unlock()
	if fake.CloneOrPullStub != nil {
		return fake.CloneOrPullStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloneOrPullReturns.result1
}

func (fake *FakeGitRepo) CloneOrPullCallCount() int {
	fake.cloneOrPullMutex.RLock()
	defer fake.cloneOrPullMutex.RUnlock()
	return len(fake.cloneOrPullArgsForCall)
}

func (fake *FakeGitRepo) CloneOrPullReturns(result1 error) {
	fake.CloneOrPullStub = nil
	fake.cloneOrPullReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepo) CloneOrPullReturnsOnCall(i int, result1 error) {
	fake.CloneOrPullStub = nil
	if fake.cloneOrPullReturnsOnCall == nil {
		fake.cloneOrPullReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cloneOrPullReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepo) CommitAndPush(message string) error {
	fake.commitAndPushMutex.Lock()
	ret, specificReturn := fake.commitAndPushReturnsOnCall[len(fake.commitAndPushArgsForCall)]
	fake.commitAndPushArgsForCall = append(fake.commitAndPushArgsForCall, struct {
		message string
	}{message})
	fake.recordInvocation("CommitAndPush", []interface{}{message})
	fake.commitAndPushMutex.Unlock()
	if fake.CommitAndPushStub != nil {
		return fake.CommitAndPushStub(message)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.commitAndPushReturns.result1
}

func (fake *FakeGitRepo) CommitAndPushCallCount() int {
	fake.commitAndPushMutex.RLock()
	defer fake.commitAndPushMutex.RUnlock()
	return len(fake.commitAndPushArgsForCall)
}

func (fake *FakeGitRepo) CommitAndPushArgsForCall(i int) string {
	fake.commitAndPushMutex.RLock()
	defer fake.commitAndPushMutex.RUnlock()
	return fake.commitAndPushArgsForCall[i].message
}

func (fake *FakeGitRepo) CommitAndPushReturns(result1 error) {
	fake.CommitAndPushStub = nil
	fake.commitAndPushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepo) CommitAndPushReturnsOnCall(i int, result1 error) {
	fake.CommitAndPushStub = nil
	if fake.commitAndPushReturnsOnCall == nil {
		fake.commitAndPushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitAndPushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepo) Dir() string {
	fake.dirMutex.Lock()
	ret, specificReturn := fake.dirReturnsOnCall[len(fake.dirArgsForCall)]
	fake.dirArgsForCall = append(fake.dirArgsForCall, struct{}{})
	fake.recordInvocation("Dir", []interface{}{})
	fake.dirMutex.Unlock()
	if fake.DirStub != nil {
		return fake.DirStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.dirReturns.result1
}

func (fake *FakeGitRepo) DirCallCount() int {
	fake.dirMutex.RLock()
	defer fake.dirMutex.RUnlock()
	return len(fake.dirArgsForCall)
}

func (fake *FakeGitRepo) DirReturns(result1 string) {
	fake.DirStub = nil
	fake.dirReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeGitRepo) DirReturnsOnCall(i int, result1 string) {
	fake.DirStub = nil
	if fake.dirReturnsOnCall == nil {
		fake.dirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.dirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeGitRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloneOrPullMutex.RLock()
	defer fake.cloneOrPullMutex.RUnlock()
	fake.commitAndPushMutex.RLock()
	defer fake.commitAndPushMutex.RUnlock()
	fake.dirMutex.RLock()
	defer fake.dirMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGitRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
