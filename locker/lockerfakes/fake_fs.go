// This file was generated by counterfeiter
package lockerfakes

import (
	"sync"
)

type FakeFs struct {
	LsStub        func(dir string) ([]string, error)
	lsMutex       sync.RWMutex
	lsArgsForCall []struct {
		dir string
	}
	lsReturns struct {
		result1 []string
		result2 error
	}
	lsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	LsDirsStub        func(dir string) ([]string, error)
	lsDirsMutex       sync.RWMutex
	lsDirsArgsForCall []struct {
		dir string
	}
	lsDirsReturns struct {
		result1 []string
		result2 error
	}
	lsDirsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	MvStub        func(src, dst string) error
	mvMutex       sync.RWMutex
	mvArgsForCall []struct {
		src string
		dst string
	}
	mvReturns struct {
		result1 error
	}
	mvReturnsOnCall map[int]struct {
		result1 error
	}
	RmStub        func(path string) error
	rmMutex       sync.RWMutex
	rmArgsForCall []struct {
		path string
	}
	rmReturns struct {
		result1 error
	}
	rmReturnsOnCall map[int]struct {
		result1 error
	}
	TouchStub        func(file string) error
	touchMutex       sync.RWMutex
	touchArgsForCall []struct {
		file string
	}
	touchReturns struct {
		result1 error
	}
	touchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFs) Ls(dir string) ([]string, error) {
	fake.lsMutex.Lock()
	ret, specificReturn := fake.lsReturnsOnCall[len(fake.lsArgsForCall)]
	fake.lsArgsForCall = append(fake.lsArgsForCall, struct {
		dir string
	}{dir})
	fake.recordInvocation("Ls", []interface{}{dir})
	fake.lsMutex.Unlock()
	if fake.LsStub != nil {
		return fake.LsStub(dir)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.lsReturns.result1, fake.lsReturns.result2
}

func (fake *FakeFs) LsCallCount() int {
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	return len(fake.lsArgsForCall)
}

func (fake *FakeFs) LsArgsForCall(i int) string {
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	return fake.lsArgsForCall[i].dir
}

func (fake *FakeFs) LsReturns(result1 []string, result2 error) {
	fake.LsStub = nil
	fake.lsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeFs) LsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.LsStub = nil
	if fake.lsReturnsOnCall == nil {
		fake.lsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.lsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeFs) LsDirs(dir string) ([]string, error) {
	fake.lsDirsMutex.Lock()
	ret, specificReturn := fake.lsDirsReturnsOnCall[len(fake.lsDirsArgsForCall)]
	fake.lsDirsArgsForCall = append(fake.lsDirsArgsForCall, struct {
		dir string
	}{dir})
	fake.recordInvocation("LsDirs", []interface{}{dir})
	fake.lsDirsMutex.Unlock()
	if fake.LsDirsStub != nil {
		return fake.LsDirsStub(dir)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.lsDirsReturns.result1, fake.lsDirsReturns.result2
}

func (fake *FakeFs) LsDirsCallCount() int {
	fake.lsDirsMutex.RLock()
	defer fake.lsDirsMutex.RUnlock()
	return len(fake.lsDirsArgsForCall)
}

func (fake *FakeFs) LsDirsArgsForCall(i int) string {
	fake.lsDirsMutex.RLock()
	defer fake.lsDirsMutex.RUnlock()
	return fake.lsDirsArgsForCall[i].dir
}

func (fake *FakeFs) LsDirsReturns(result1 []string, result2 error) {
	fake.LsDirsStub = nil
	fake.lsDirsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeFs) LsDirsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.LsDirsStub = nil
	if fake.lsDirsReturnsOnCall == nil {
		fake.lsDirsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.lsDirsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeFs) Mv(src string, dst string) error {
	fake.mvMutex.Lock()
	ret, specificReturn := fake.mvReturnsOnCall[len(fake.mvArgsForCall)]
	fake.mvArgsForCall = append(fake.mvArgsForCall, struct {
		src string
		dst string
	}{src, dst})
	fake.recordInvocation("Mv", []interface{}{src, dst})
	fake.mvMutex.Unlock()
	if fake.MvStub != nil {
		return fake.MvStub(src, dst)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mvReturns.result1
}

func (fake *FakeFs) MvCallCount() int {
	fake.mvMutex.RLock()
	defer fake.mvMutex.RUnlock()
	return len(fake.mvArgsForCall)
}

func (fake *FakeFs) MvArgsForCall(i int) (string, string) {
	fake.mvMutex.RLock()
	defer fake.mvMutex.RUnlock()
	return fake.mvArgsForCall[i].src, fake.mvArgsForCall[i].dst
}

func (fake *FakeFs) MvReturns(result1 error) {
	fake.MvStub = nil
	fake.mvReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFs) MvReturnsOnCall(i int, result1 error) {
	fake.MvStub = nil
	if fake.mvReturnsOnCall == nil {
		fake.mvReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mvReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFs) Rm(path string) error {
	fake.rmMutex.Lock()
	ret, specificReturn := fake.rmReturnsOnCall[len(fake.rmArgsForCall)]
	fake.rmArgsForCall = append(fake.rmArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("Rm", []interface{}{path})
	fake.rmMutex.Unlock()
	if fake.RmStub != nil {
		return fake.RmStub(path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rmReturns.result1
}

func (fake *FakeFs) RmCallCount() int {
	fake.rmMutex.RLock()
	defer fake.rmMutex.RUnlock()
	return len(fake.rmArgsForCall)
}

func (fake *FakeFs) RmArgsForCall(i int) string {
	fake.rmMutex.RLock()
	defer fake.rmMutex.RUnlock()
	return fake.rmArgsForCall[i].path
}

func (fake *FakeFs) RmReturns(result1 error) {
	fake.RmStub = nil
	fake.rmReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFs) RmReturnsOnCall(i int, result1 error) {
	fake.RmStub = nil
	if fake.rmReturnsOnCall == nil {
		fake.rmReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rmReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFs) Touch(file string) error {
	fake.touchMutex.Lock()
	ret, specificReturn := fake.touchReturnsOnCall[len(fake.touchArgsForCall)]
	fake.touchArgsForCall = append(fake.touchArgsForCall, struct {
		file string
	}{file})
	fake.recordInvocation("Touch", []interface{}{file})
	fake.touchMutex.Unlock()
	if fake.TouchStub != nil {
		return fake.TouchStub(file)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.touchReturns.result1
}

func (fake *FakeFs) TouchCallCount() int {
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	return len(fake.touchArgsForCall)
}

func (fake *FakeFs) TouchArgsForCall(i int) string {
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	return fake.touchArgsForCall[i].file
}

func (fake *FakeFs) TouchReturns(result1 error) {
	fake.TouchStub = nil
	fake.touchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFs) TouchReturnsOnCall(i int, result1 error) {
	fake.TouchStub = nil
	if fake.touchReturnsOnCall == nil {
		fake.touchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.touchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFs) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	fake.lsDirsMutex.RLock()
	defer fake.lsDirsMutex.RUnlock()
	fake.mvMutex.RLock()
	defer fake.mvMutex.RUnlock()
	fake.rmMutex.RLock()
	defer fake.rmMutex.RUnlock()
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFs) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
