// This file was generated by counterfeiter
package requestsfakes

import (
	"sync"

	"github.com/mdelillo/claimer/slack/requests"
)

type FakeFactory struct {
	NewGetUsernameRequestStub        func(userId string) requests.GetUsernameRequest
	newGetUsernameRequestMutex       sync.RWMutex
	newGetUsernameRequestArgsForCall []struct {
		userId string
	}
	newGetUsernameRequestReturns struct {
		result1 requests.GetUsernameRequest
	}
	newGetUsernameRequestReturnsOnCall map[int]struct {
		result1 requests.GetUsernameRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFactory) NewGetUsernameRequest(userId string) requests.GetUsernameRequest {
	fake.newGetUsernameRequestMutex.Lock()
	ret, specificReturn := fake.newGetUsernameRequestReturnsOnCall[len(fake.newGetUsernameRequestArgsForCall)]
	fake.newGetUsernameRequestArgsForCall = append(fake.newGetUsernameRequestArgsForCall, struct {
		userId string
	}{userId})
	fake.recordInvocation("NewGetUsernameRequest", []interface{}{userId})
	fake.newGetUsernameRequestMutex.Unlock()
	if fake.NewGetUsernameRequestStub != nil {
		return fake.NewGetUsernameRequestStub(userId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newGetUsernameRequestReturns.result1
}

func (fake *FakeFactory) NewGetUsernameRequestCallCount() int {
	fake.newGetUsernameRequestMutex.RLock()
	defer fake.newGetUsernameRequestMutex.RUnlock()
	return len(fake.newGetUsernameRequestArgsForCall)
}

func (fake *FakeFactory) NewGetUsernameRequestArgsForCall(i int) string {
	fake.newGetUsernameRequestMutex.RLock()
	defer fake.newGetUsernameRequestMutex.RUnlock()
	return fake.newGetUsernameRequestArgsForCall[i].userId
}

func (fake *FakeFactory) NewGetUsernameRequestReturns(result1 requests.GetUsernameRequest) {
	fake.NewGetUsernameRequestStub = nil
	fake.newGetUsernameRequestReturns = struct {
		result1 requests.GetUsernameRequest
	}{result1}
}

func (fake *FakeFactory) NewGetUsernameRequestReturnsOnCall(i int, result1 requests.GetUsernameRequest) {
	fake.NewGetUsernameRequestStub = nil
	if fake.newGetUsernameRequestReturnsOnCall == nil {
		fake.newGetUsernameRequestReturnsOnCall = make(map[int]struct {
			result1 requests.GetUsernameRequest
		})
	}
	fake.newGetUsernameRequestReturnsOnCall[i] = struct {
		result1 requests.GetUsernameRequest
	}{result1}
}

func (fake *FakeFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newGetUsernameRequestMutex.RLock()
	defer fake.newGetUsernameRequestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ requests.Factory = new(FakeFactory)
